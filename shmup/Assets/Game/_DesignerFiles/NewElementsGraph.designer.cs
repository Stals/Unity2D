// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;


[DiagramInfoAttribute("Game")]
public class PlayerViewModelBase : EntityViewModel {
    
    public P<Int32> _scoreProperty;
    
    public P<Int32> _multiplayerProperty;
    
    public P<Int32> _partsProperty;
    
    protected CommandWithSender<PlayerViewModel> _AddMultiplayerPart;
    
    protected CommandWithSenderAndArgument<PlayerViewModel, Int32> _AddScore;
    
    public PlayerViewModelBase(PlayerControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public PlayerViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
        _scoreProperty = new P<Int32>(this, "score");
        _multiplayerProperty = new P<Int32>(this, "multiplayer");
        _partsProperty = new P<Int32>(this, "parts");
    }
}

public partial class PlayerViewModel : PlayerViewModelBase {
    
    public PlayerViewModel(PlayerControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public PlayerViewModel() : 
            base() {
    }
    
    public virtual P<Int32> scoreProperty {
        get {
            return this._scoreProperty;
        }
    }
    
    public virtual Int32 score {
        get {
            return _scoreProperty.Value;
        }
        set {
            _scoreProperty.Value = value;
        }
    }
    
    public virtual P<Int32> multiplayerProperty {
        get {
            return this._multiplayerProperty;
        }
    }
    
    public virtual Int32 multiplayer {
        get {
            return _multiplayerProperty.Value;
        }
        set {
            _multiplayerProperty.Value = value;
        }
    }
    
    public virtual P<Int32> partsProperty {
        get {
            return this._partsProperty;
        }
    }
    
    public virtual Int32 parts {
        get {
            return _partsProperty.Value;
        }
        set {
            _partsProperty.Value = value;
        }
    }
    
    public virtual CommandWithSender<PlayerViewModel> AddMultiplayerPart {
        get {
            return _AddMultiplayerPart;
        }
        set {
            _AddMultiplayerPart = value;
        }
    }
    
    public virtual CommandWithSenderAndArgument<PlayerViewModel, Int32> AddScore {
        get {
            return _AddScore;
        }
        set {
            _AddScore = value;
        }
    }
    
    protected override void WireCommands(Controller controller) {
        base.WireCommands(controller);
        var player = controller as PlayerControllerBase;
        this.AddMultiplayerPart = new CommandWithSender<PlayerViewModel>(this, player.AddMultiplayerPart);
        this.AddScore = new CommandWithSenderAndArgument<PlayerViewModel, Int32>(this, player.AddScore);
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
        stream.SerializeInt("score", this.score);
        stream.SerializeInt("multiplayer", this.multiplayer);
        stream.SerializeInt("parts", this.parts);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
        		this.score = stream.DeserializeInt("score");;
        		this.multiplayer = stream.DeserializeInt("multiplayer");;
        		this.parts = stream.DeserializeInt("parts");;
    }
    
    public override void Unbind() {
        base.Unbind();
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
        list.Add(new ViewModelPropertyInfo(_scoreProperty, false, false, false));
        list.Add(new ViewModelPropertyInfo(_multiplayerProperty, false, false, false));
        list.Add(new ViewModelPropertyInfo(_partsProperty, false, false, false));
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
        list.Add(new ViewModelCommandInfo("AddMultiplayerPart", AddMultiplayerPart) { ParameterType = typeof(void) });
        list.Add(new ViewModelCommandInfo("AddScore", AddScore) { ParameterType = typeof(Int32) });
    }
}

[DiagramInfoAttribute("Game")]
public class EntityViewModelBase : ViewModel {
    
    protected CommandWithSenderAndArgument<EntityViewModel, Int32> _TakeDamage;
    
    public EntityViewModelBase(EntityControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public EntityViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
    }
}

public partial class EntityViewModel : EntityViewModelBase {
    
    public EntityViewModel(EntityControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public EntityViewModel() : 
            base() {
    }
    
    public virtual CommandWithSenderAndArgument<EntityViewModel, Int32> TakeDamage {
        get {
            return _TakeDamage;
        }
        set {
            _TakeDamage = value;
        }
    }
    
    protected override void WireCommands(Controller controller) {
        var entity = controller as EntityControllerBase;
        this.TakeDamage = new CommandWithSenderAndArgument<EntityViewModel, Int32>(this, entity.TakeDamage);
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
    }
    
    public override void Unbind() {
        base.Unbind();
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
        list.Add(new ViewModelCommandInfo("TakeDamage", TakeDamage) { ParameterType = typeof(Int32) });
    }
}

[DiagramInfoAttribute("Game")]
public class EnemyViewModelBase : EntityViewModel {
    
    public EnemyViewModelBase(EnemyControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public EnemyViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
    }
}

public partial class EnemyViewModel : EnemyViewModelBase {
    
    public EnemyViewModel(EnemyControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public EnemyViewModel() : 
            base() {
    }
    
    protected override void WireCommands(Controller controller) {
        base.WireCommands(controller);
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
    }
    
    public override void Unbind() {
        base.Unbind();
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
    }
}

[DiagramInfoAttribute("Game")]
public class BulletViewModelBase : ViewModel {
    
    public P<Single> _speedProperty;
    
    public BulletViewModelBase(BulletControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public BulletViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
        _speedProperty = new P<Single>(this, "speed");
    }
}

public partial class BulletViewModel : BulletViewModelBase {
    
    public BulletViewModel(BulletControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public BulletViewModel() : 
            base() {
    }
    
    public virtual P<Single> speedProperty {
        get {
            return this._speedProperty;
        }
    }
    
    public virtual Single speed {
        get {
            return _speedProperty.Value;
        }
        set {
            _speedProperty.Value = value;
        }
    }
    
    protected override void WireCommands(Controller controller) {
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
        stream.SerializeFloat("speed", this.speed);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
        		this.speed = stream.DeserializeFloat("speed");;
    }
    
    public override void Unbind() {
        base.Unbind();
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
        list.Add(new ViewModelPropertyInfo(_speedProperty, false, false, false));
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
    }
}
