// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UniRx;


[System.SerializableAttribute()]
public sealed partial class GameSceneManagerSettings {
    
    public string[] _Scenes;
}

// <summary>
// The responsibility of this class is to manage the scenes Initialization, Loading, Transitioning, and Unloading.
// </summary>
public class GameSceneManagerBase : SceneManager {
    
    private PlayerController _PlayerController;
    
    private EntityController _EntityController;
    
    private EnemyController _EnemyController;
    
    public GameSceneManagerSettings _GameSceneManagerSettings = new GameSceneManagerSettings();
    
    [Inject()]
    public virtual PlayerController PlayerController {
        get {
            if ((this._PlayerController == null)) {
                this._PlayerController = new PlayerController() { Container = Container };
            }
            return this._PlayerController;
        }
        set {
            _PlayerController = value;
        }
    }
    
    [Inject()]
    public virtual EntityController EntityController {
        get {
            if ((this._EntityController == null)) {
                this._EntityController = new EntityController() { Container = Container };
            }
            return this._EntityController;
        }
        set {
            _EntityController = value;
        }
    }
    
    [Inject()]
    public virtual EnemyController EnemyController {
        get {
            if ((this._EnemyController == null)) {
                this._EnemyController = new EnemyController() { Container = Container };
            }
            return this._EnemyController;
        }
        set {
            _EnemyController = value;
        }
    }
    
    // <summary>
    // This method is the first method to be invoked when the scene first loads. Anything registered here with 'Container' will effectively 
    // be injected on controllers, and instances defined on a subsystem.And example of this would be Container.RegisterInstance<IDataRepository>(new CodeRepository()). Then any property with 
    // the 'Inject' attribute on any controller or view-model will automatically be set by uFrame. 
    // </summary>
    public override void Setup() {
        base.Setup();
        Container.RegisterController<PlayerController>(PlayerController);
        Container.RegisterController<EntityController>(EntityController);
        Container.RegisterController<EnemyController>(EnemyController);
        this.Container.InjectAll();
    }
    
    public override void Initialize() {
        base.Initialize();
    }
}
